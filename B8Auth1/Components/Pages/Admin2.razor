@page "/admin2"
@using B8Auth1.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@rendermode InteractiveServer
@inject UserManager<ApplicationUser> UserManager
@inject UserManager<ApplicationUser> UserManager2

@attribute [Authorize(Policy = "MustBeAdminUser")]


<h3>Select a User</h3>

@* <select onchange="OnUserSelected">
    <option value="" disabled selected>Select a user</option>
    @foreach (var user in users!)
    {
        <option value="@user.Id">@user.UserName</option>
    }
</select> *@

@* <InputSelect TValue="string" @onchange="OnUserSelected"> *@
@* <InputSelect 
    Value="@selectedUser2" 
    ValueExpression="() => selectedUser2"
    ValueChanged="(string s) => OnUserSelected(s)">
    
    <option value="" disabled selected>Select a user</option>

    @foreach (var user in users!)
    {
        <option value="@user.Id">@user.UserName</option>
    } 

</InputSelect> *@

<h3>Select a Color</h3>
<InputSelect TValue="string" @bind-Value="selectedColor">
    <option value="" disabled selected>Select a color</option>
    @foreach (var color in colors)
    {
        <option value="@color">@color</option>
    }
    </InputSelect>

@if (selectedUserClaims != null)
{
    <h3>User Claims</h3>
    @foreach (var claim in selectedUserClaims)
    {
        <div>
    <input type="checkbox" checked="@claim.Value" disabled />
    <label>@claim.Type</label>
</div>
    }
}

<button @onclick="() => OnUserSelected(selectedUserId)">Load Claims</button>

@code {
    private string? selectedColor;
    private List<string> colors = new List<string> { "Red", "Green", "Blue" };
    private string? selectedUserId;
    private IQueryable<ApplicationUser> users = default!;    
    private ApplicationUser selectedUser = default!;
    private string selectedUser2 = default!;
    private IList<Claim>? selectedUserClaims;

    protected override void OnInitialized()
    {
        selectedUserId = "30f4051e-1cfa-45ef-8663-8d9c82b02520";
        @* users =  UserManager.Users; *@
        @* usersList = UserManager.Users.ToList(); *@
        
    }

    @* private async Task OnUserSelected(ChangeEventArgs e) *@
    private async Task OnUserSelected(string e)
    {        
        var userId = e;
        if (!string.IsNullOrEmpty(userId))
        {
            var user = await UserManager.FindByIdAsync(userId);
            if (user != null)
            {
                selectedUserClaims = await UserManager2.GetClaimsAsync(user);
            }
        }
        else
        {
            selectedUserClaims = null;
        }
    }
}