@page "/admin"
@using B8Auth1.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject UserManager<ApplicationUser> UserManager

@attribute [Authorize(Policy = "MustBeAdminUser")]


@* <h3>Admin - User List</h3>

@if (users == null)
{
<p>Loading...</p>
}
else
{
<table class="table">
<thead>
<tr>
<th>User ID</th>
<th>Username</th>
<th>Email</th>
</tr>
</thead>
<tbody>
@foreach (var user in users)
{
<tr>
<td>@user.Id</td>
<td>@user.UserName</td>
<td>@user.Email</td>
</tr>
}
</tbody>
</table>
} *@

<h3>Select a User</h3>
@* <InputSelect TValue="string" @onchange="OnUserSelected"> *@
<InputSelect Value="@selectedUser2" ValueExpression="() => selectedUser2"
    ValueChanged="(string s) => OnUserSelected(s)">

    @if (users == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        <option value="" disabled selected>Select a user</option>

        @foreach (var user in users!)
        {
            <option value="@user.Id">@user.UserName</option>
        }
    }

</InputSelect>

<br />
<br />
<br />


@if (selectedUserClaimInfo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="edit-form-box">
    <h3>User Claims</h3>
    <EditForm Model="@selectedUserClaimInfo">
        <div>
            <label>User Name:</label>
            <span>@selectedUserClaimInfo.UserId</span>
        </div>
        <br />
        <InputCheckbox @bind-Value="@selectedUserClaimInfo.IsAdmin" />
        <label>Is Admin</label>
        <br />
        <InputCheckbox @bind-Value="@selectedUserClaimInfo.IsPremium" />
        <label>Is Premium</label>
        <br />
        <br />

        <button type="submit">Save</button>
    </EditForm>
</div>
}

@* @if (selectedUserClaims != null)
{
<h3>User Claims</h3>
@foreach (var claim in selectedUserClaims)
{
<div>
<input type="checkbox" checked="@claim.Value" disabled />
<label>@claim.Type</label>
</div>
}
} *@

@code {
    private List<ApplicationUser> users = default!;
    private ApplicationUser selectedUser = default!;
    private string selectedUser2 = default!;
    private IList<Claim>? selectedUserClaims;
    private UserClaimInfo selectedUserClaimInfo = new UserClaimInfo();




    protected override async Task OnInitializedAsync()
    {
        @* users = UserManager.Users; *@
        users = await UserManager.Users.ToListAsync();


        @* usersList = UserManager.Users.ToList(); *@

    }

    @* private async Task OnUserSelected(ChangeEventArgs e) *@
    private async Task OnUserSelected(string e)
    {
        var userId = e;
        if (!string.IsNullOrEmpty(userId))
        {
            var user = await UserManager.FindByIdAsync(userId);
            if (user != null)
            {
                selectedUserClaims = await UserManager.GetClaimsAsync(user);
                if (selectedUserClaims != null)
                {
                    selectedUserClaimInfo.UserId = user.Id;
                    selectedUserClaimInfo.IsAdmin = selectedUserClaims.Any(c => c.Type == "AdminUser" && c.Value == "true");
                    selectedUserClaimInfo.IsPremium = selectedUserClaims.Any(c => c.Type == "IsPremiumUser" && c.Value == "true");
                }
            }
        }
        else
        {
            selectedUserClaims = null;
        }
    }

    public class UserClaimInfo
    {
        public string UserId { get; set; } = default!;
        public bool IsAdmin { get; set; }
        public bool IsPremium { get; set; }
    }
}