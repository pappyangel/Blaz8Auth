@page "/admin"
@using B8Auth1.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject UserManager<ApplicationUser> UserManager

@attribute [Authorize(Policy = "MustBeAdminUser")]

<div class="edit-form-box">
    <h2>User Claims</h2>
    <br />
    <h4>Select a User</h4>
    <InputSelect Value="@selectedUser" ValueExpression="() => selectedUser"
        ValueChanged="(string s) => OnUserSelected(s)">
        @if (users == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <option value="" disabled selected>Select a user</option>
            @foreach (var user in users!)
            {
                <option value="@user.Id">@user.UserName</option>
            }
        }
    </InputSelect>
    <br /> <br /> <br />
    @if (selectedUserClaimInfo == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {        
        <EditForm Model="@selectedUserClaimInfo" OnValidSubmit="ProcessUserClaims">
                <div>
                    <label>User Name:</label>
                    <span>@selectedUserClaimInfo.UserName</span>
                </div>
                <br />
                <InputCheckbox @bind-Value="@selectedUserClaimInfo.IsAdmin" />
                <label>Is Admin</label>
                <br />
                <InputCheckbox @bind-Value="@selectedUserClaimInfo.IsPremium" />
                <label>Is Premium</label>
                <br />
                <br />
                <button type="submit">Update Claims</button>
        </EditForm>    
    }
</div>

<ToastComp @ref="childtoast">

    <Body>
        <p>Claims Updated</p>
    </Body>
</ToastComp>

@code {
    private List<ApplicationUser> users = default!;    
    private string selectedUser = default!;
    private IList<Claim>? selectedUserClaims;
    private UserClaimInfo selectedUserClaimInfo = new UserClaimInfo();
    private ToastComp? childtoast { get; set; }

    protected override async Task OnInitializedAsync()
    {        
        users = await UserManager.Users.ToListAsync();
    }
    
    private async Task ProcessUserClaims()
    {
        var userId = selectedUserClaimInfo.UserId;
        if (!string.IsNullOrEmpty(userId))
        {
            var user = await UserManager.FindByIdAsync(userId);            
            if (user != null)
            {
                if (selectedUserClaimInfo.IsAdmin)
                {
                    await UserManager.AddClaimAsync(user, new Claim("AdminUser", "true"));                    
                }
                else 
                {
                    await UserManager.RemoveClaimAsync(user, new Claim("AdminUser", "true"));
                }
                if (selectedUserClaimInfo.IsPremium)
                {
                    await UserManager.AddClaimAsync(user, new Claim("IsPremiumUser", "true"));                    
                }
                else 
                {
                    await UserManager.RemoveClaimAsync(user, new Claim("IsPremiumUser", "true"));
                }
                childtoast?.ShowToast();
                
            }
        }
    }
    private async Task OnUserSelected(string e)
    {
        var userId = e;
        if (!string.IsNullOrEmpty(userId))
        {
            var user = await UserManager.FindByIdAsync(userId);            
            if (user != null)
            {
                selectedUserClaims = await UserManager.GetClaimsAsync(user);
                if (selectedUserClaims != null)
                {
                    selectedUserClaimInfo.UserId = user.Id;
                    selectedUserClaimInfo.UserName = user.UserName!;
                    selectedUserClaimInfo.IsAdmin = selectedUserClaims.Any(c => c.Type == "AdminUser" && c.Value == "true");
                    selectedUserClaimInfo.IsPremium = selectedUserClaims.Any(c => c.Type == "IsPremiumUser" && c.Value == "true");
                }
            }
        }
        else
        {
            selectedUserClaims = null;
        }
    }

    public class UserClaimInfo
    {
        public string UserId { get; set; } = default!;
        public string UserName { get; set; } = default!;
        public bool IsAdmin { get; set; }
        public bool IsPremium { get; set; }
    }
}