@page "/admin"
@using B8Auth1.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@rendermode InteractiveServer
@inject UserManager<ApplicationUser> UserManager

@attribute [Authorize(Policy = "MustBeAdminUser")]


<h3>Admin - User List</h3>

@if (users == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User ID</th>
                <th>Username</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Select a User</h3>
@* <InputSelect TValue="string" @onchange="OnUserSelected"> *@
<InputSelect 
    Value="@selectedUser2" 
    ValueExpression="() => selectedUser2"
    ValueChanged="(string s) => OnUserSelected(s)">
    
    <option value="" disabled selected>Select a user</option>

    @foreach (var user in users!)
    {
        <option value="@user.Id">@user.UserName</option>
    } 

</InputSelect>

@if (selectedUserClaims != null)
{
    <h3>User Claims</h3>
    @foreach (var claim in selectedUserClaims)
    {
        <div>
    <input type="checkbox" checked="@claim.Value" disabled />
    <label>@claim.Type</label>
</div>
    }
}

@code {
    private IQueryable<ApplicationUser> users = default!;    
    private ApplicationUser selectedUser = default!;
    private string selectedUser2 = default!;
    private IList<Claim>? selectedUserClaims;

    protected override void OnInitialized()
    {
        users =  UserManager.Users;
        @* usersList = UserManager.Users.ToList(); *@
        
    }

    @* private async Task OnUserSelected(ChangeEventArgs e) *@
    private async Task OnUserSelected(string e)
    {        
        var userId = e;
        if (!string.IsNullOrEmpty(userId))
        {
            var user = await UserManager.FindByIdAsync(userId);
            if (user != null)
            {
                selectedUserClaims = await UserManager.GetClaimsAsync(user);
            }
        }
        else
        {
            selectedUserClaims = null;
        }
    }
}